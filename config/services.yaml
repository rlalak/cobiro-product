# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    defaultPriceCurrency: PLN

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/App/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Interview\Product\Infrastructure\Doctrine\ORM\ServiceEntityRepository:

    Interview\Product\Domain\ProductFactoryInterface:
        class: Interview\Product\Domain\ProductFactory
        arguments:
            $defaultPriceCurrency: '%defaultPriceCurrency%'

    Interview\Product\Domain\ProductRepositoryInterface:
        class: Interview\Product\Infrastructure\Doctrine\ORM\ProductRepository

    Interview\Product\Application\Query\GetProductQueryInterface:
        class: Interview\Product\Infrastructure\Doctrine\DBAL\Query\GetProductQuery

    interview.product.create_product_handler:
        class: Interview\Product\Application\Command\CreateOrUpdateProductHandler
        tags:
            - { name: tactician.handler, command: Interview\Product\Application\Command\CreateProductCommand }

    interview.product.update_product_handler:
        class: Interview\Product\Application\Command\CreateOrUpdateProductHandler
        tags:
            - { name: tactician.handler, command: Interview\Product\Application\Command\UpdateProductCommand }


    interview.product.remove_product_handler:
        class: Interview\Product\Application\Command\RemoveProductHandler
        tags:
            - { name: tactician.handler, typehints: true }